#. Play new - this is how you create a new app.
#. Play run - Show the default app main page, show the @documentation, mention it is a little problematic to access it while in debug or in error mode.
#. Play eclipse, open in IntelliJ, possibly explain IntelliJ play plugin is in the Ultimate version, and SBT plugin doesn't work.
#. Play intro, show a picture of MVC and talk 20 seconds on each part.
#. Show the routes file, and explain about mapping to the controller. Then go through d1-d6.
#. Talk a little about REST (Representational State Transfer), where the state is of resources. In our project, the resource is projects.
    Which we can list all instances off, a particular instance and create a new instance so we will have a route of :
        a. GET      /project/:id
        b. GET      /project
        c. POST     /project/:id
        d. PUT      /project
#. Talk a little about the demo project - Projects is an app which allows you to propose project ideas,
                and allows other people to vote for them, join them, and even adopt them. We aren't going to complete
                it, but this is the idea you should have in your head. The capabilities we need are Add project, and Edit

#. Talk about features we need, such as :
        a. Listing existing projects.
        b. Add a new project.
        c. Update existing project.
   Implement routes (d7).
#. Implement appropriate methods on the Application controller, d8
#. Move to my project instead of the new one. Start with this, I like to design my app from my public api and out, it isn't the right way, but it is my way.
   Explain about REST (Representational State Transfer), where the state is of resources. In our project, the resource is projects.
   Which we can list all instances off, a particular instance and create a new instance.
   so we will have a route of :
        a. GET      /project/:id
        b. GET      /project
        c. POST     /project/:id
        d. PUT      /project

   Show that if I fake a method, it doesn't work. Then make a method with TODO.
   Explain a little about PUT vs. POST argument ?

#. So now what ? Our controller needs to return something. We need a model. Play is Model agnostic, you can return whatever you want from your controllers.
   We will be using JPA for familiarity, for which play has a plugin. First we need JPA and hibernate. Go to build.scala to show how to add a dependency. d9.
   Regenerate project files.

#. Now the model itself, d10. As mentioned I'm assuming JPA knowledge.
   Quickly pass over methods and JPA.em() should be explained.

#. (?) Mention the validations, say we will return to them soon.

#. Now, I have created a model, what about a DB ? Play comes prepared with an embedded database called H2, which in default work in memory,
   but can work in Explain about evolutions, what they are, when they are called. I will then create ( or copy from somewhere 1.sql, 2.sql).
    Refresh and apply evolutions.

#. Now we have the data, time to connect the data to the view. Go to controller and implement the project() method, by calling the appropriate method on the model. Explain why this structure has some merits.
Throw DomainDrivenDesign into the air, maybe it will stick with someone.

#. Explain now would be a good time to write unit tests, which play is very compatible with, but we won't have the time.

#. Now I should access the url in chrome to see JSON is returned. Note the transaction error, add a @Transactioanl, try again.

#. Now implement the add/update methods, explain about dynamic forms and how they relate to the validations.

#. (?) Implement the updateProject() method, note the similarity between the update and the add method, compare to difference between POST and PUT

###################################################################################################################################################
#. ################################ Dramatic pause, now we move to Angular #####################################################
###################################################################################################################################################

#. Explain first about where it came from and etc, google bla bla. The future of the web, bla bla. Dependency injection,
modular, extending HTML.

#. We are going to start with a pure Angular example, go to routes and replace with usage of index.html a1

#. Create index.html in public, content with a2, show import of angular.js, app.js and explain ngApp, ngController, ngBind

#. Create app.js (a3). Explain angular.module, the controller function.

#. Now we are going to show two way data-binding. a4, a5. Explain ngModel,ngRepeat and filter, as well as the {{}} synatx.
    Explicitly ignore ngCloak.

#. Now we should use the server a little, use $http. a6

#. Explain how ugly this is, similar to accessing the DB from a server side controller, suffers from very similar issues.
    Now we have advantages in reuse, testability, terseness and so on. a7

#. Example of what kind of methods could be on the controller, simple behaviour which is view dependant. a8,a9.
    Actually, explain this is a lie, while this sort of behavior is possible sometimes, for useful view behaviour,
    there is the concept of directive which we should use, and it is very critical to angular, but too much to
    explain in the scope of this lecture. Remember, teaching HTML new tricks.

#.  So what do we always put on a controller ? I'm glad you asked, let's try to add a new project. a10-11

#. Add a section about SPA and routes ?

# ng-view

#. Go to app.js and explain what the $routeProvider does. Mention the #, but explain it is not interesting at the moment.

#. Create two simple templates, simple and other simple, and show how you can switch between them with the url.

#. Move to the part of app.js that links to bindingCtrl.js and explain where the controller comes from and how databinding in AngularJS works.

#. Move to the actual projects.html I wrote, after appropriate changes to app.js.

#. Add dependency on $http and call the appropriate server url, bind data to scope.

#. Explain how ng-repeat works.

#. Explain I put zero effort into CSS, and show how important it is. Probably a good place to mention bootstrap twitter.


#. Mention talking about testing should come next, but it won't, because we have likely already covered too much. Mention it
is pretty sweet with the DI and mocks and all.

# History api and $locationProvider.html5mode



* Show how to run in debug mode, and explain difference between ~run and run.